fig = NULL
message("[===========================]")
message("[###### getlcai START ######]")
message("-----------------------------")
#### 0 从用户获取输入数据 ====
message("\n[INFO] Reading the input data. Please ensure that the input data format is consistent with the requirements.")
# 读取输入表达矩阵 data.frame或文本文件 第一列为基因名,其余列为样本名
if (Reduce("|",is(exp) == "character")) {
# 判断input文件路径是否正确
if(file.exists(exp) == FALSE){
stop("Reading error: Your 'exp' for loading does not exists, please assign a correct file path.")
}else{
exp_input = read.table(exp,
stringsAsFactors = F,
sep = "\t",
header = T,
row.names = 1)
}
}else if (Reduce("|",is(exp) %in% c("data.frame"))){
exp_input = exp
}else if (Reduce("|",is(exp) %in% c("matrix"))){
exp_input = as.data.frame(exp)
}else{
stop("Reading error: 'exp' isn't recognized as a data.frame or filename.")
}
# 读取输入分组信息 data.frame或文本文件
if (Reduce("|",is(pheno) == "character")) {
# 判断input文件路径是否正确
if(file.exists(pheno) == FALSE){
stop("Reading error: Your 'pheno' for loading does not exists, please assign a correct file path.")
}else{
pheno_input = read.table(pheno,
stringsAsFactors = F,
sep = "\t",
header = T)
}
}else if (Reduce("|",is(pheno) %in% c("data.frame"))){
pheno_input = pheno
}else if (Reduce("|",is(pheno) %in% c("matrix"))){
pheno_input = as.data.frame(pheno)
}else{
stop("Reading error: 'pheno' isn't recognized as a data.frame or filename.")
}
message("[INFO] Reading Success")
#### 1 处理输入矩阵,只保留mapping到的基因的表达量 ====
# 判断输入矩阵测序方法：Array、RNA-seq
# 重点：这里涉及到一个不同技术平台数据合并的问题，目前只是单纯的合并，会有问题，后续需要更好的合并标准化方法
exp_input = as.data.frame(lapply(exp_input,as.numeric),row.names = rownames(exp_input))
if (type == "RNA-seq") {
exp_input = log(exp_input+1)
message("[INFO] Data type is RNA-seq.The data is transformed by natural logarithm.")
}else if (type == "Array") {
message("[INFO] Data type is Array.")
}else{
stop("Error: Data type setting error! Please reset it by 'RNA SEQ' or 'Array'.")
}
# 输入矩阵按照背景矩阵基因id进行mapping
# exp_input = exp_input[as.factor(rownames(exp_input)) %in% id2entrez$symbol, ]             # 判断并保留exp在背景数据的基因所在行
# exp_input$ids = id2entrez[match(as.factor(rownames(exp_input)), id2entrez$symbol), 2]     # 映射 基因id 到 Entrez id
# 将基因名变为小写，再进行匹配
exp_input = exp_input[tolower(as.factor(rownames(exp_input))) %in% tolower(id2entrez$symbol), ]             # 判断并保留exp在背景数据的基因所在行
exp_input$ids = id2entrez[match(tolower(as.factor(rownames(exp_input))), tolower(id2entrez$symbol)), 2]     # 映射 基因id 到 Entrez id
# symbol转化为Entrez id后可能会出现重复，加一个去重
exp_input = aggregate(.~ids,exp_input,mean)   # 去重，取平均值
rownames(exp_input) = exp_input$ids
exp_input = exp_input[,-1]                    # 行名改为 Entrez id
#### 2 输入矩阵与背景矩阵合并 ====
exp_input$id = rownames(exp_input)           # 添加一列id,后续基于id列合并
exp_back$id = rownames(exp_back)
exp_join = dplyr::inner_join(exp_back, exp_input, by = 'id')      # 按照id列,将exp_input中对应的数据添加到dat末尾列后,inner_join取交集
# 输出交集基因数
gene_left_count = nrow(exp_back)
gene_right_count = nrow(exp_join)
gene_percent = paste(sprintf("%.2f", (gene_right_count / gene_left_count) * 100), "%", sep = "")              # 计算百分比
gene_info = data.frame(GEO_genes = gene_left_count,
merged_genes = gene_right_count,
proportion = gene_percent)
# 输出信息 背景数据基因数, 合并后基因数, 占比
message(
"\n[INFO] The number of GEO background genes is ",
gene_left_count,
", the number of genes after merged is ",
gene_right_count,
", account for ",
gene_percent,
"\n"
)
print(gene_info,quote=F)
# 完善exp_join格式
rownames(exp_join) = exp_join$id              # 修改行名为id
exp_join = dplyr::select(exp_join, -id)       # 删去id那一列
# if (type == "RNA-seq") {
#   exp_join = log(exp_join+1)
#   message("[INFO] Data type is RNA-seq.The data is transformed by natural logarithm.")
# }
#### 3 样本分组信息合并 ====
colnames(pheno_input) = c("sample", "group")
# 判断输入文件中分组名是否和背景数据分组名相同
if (any(pheno_input$group %in% c("NSCLC", "SCLC", "NLE"))) {
stop("Error: Please do not set 'NSCLC,SCLC or NLE' as group names.")
} else{
pheno = rbind(pheno_back, pheno_input)
}
#### 4 PCA 主成分分析 ====
# 标准化,这里使用R自带的scale函数 其他方法待定
# exp_join = data.frame(scale(exp_join), check.names = F)
pc = prcomp(t(exp_join),cente=TRUE,scale.=TRUE)
pcdata = data.frame(pc$x[, 1:3])
# 循环计算每个分组中心坐标(平均值)
PC_group_mean = c("group", "PC1", "PC2", "PC3")
phe_unique = dplyr::count(x = pheno, group)
for (g in phe_unique$group) {
dat = pcdata[pheno[pheno$group == g, ]$sample, ]
PC_group_mean = rbind(PC_group_mean, c(g, mean(dat$PC1), mean(dat$PC2), mean(dat$PC3)))
}
PC_group_mean = data.frame(PC_group_mean,
row.names = NULL,
stringsAsFactors = F)
colnames(PC_group_mean) = PC_group_mean[1, ]
# 每个分组的中心点
group_center = PC_group_mean[-1, ]
#### 5 肺癌计算进展量化指数 ====
NSCLC_center = group_center[group_center$group == "NSCLC", ]
SCLC_center = group_center[group_center$group == "SCLC", ]
group_former_center = group_center[group_center$group == control, ]
group_later_center = group_center[group_center$group == experimental, ]
## 进展向量: NSCLC_center ===> SCLC_center
vector_back = get_vector(NSCLC_center,SCLC_center)
## 处理前向量(对照): NSCLC_center ===> group_former_center
vector_v = get_vector(NSCLC_center,group_former_center)
# 向量欧氏距离:
Lv = sqrt(vector_v[1]^ 2+vector_v[2]^ 2+vector_v[3]^ 2)
# 投影v
cosv = get_cos(vector_v, vector_back)
Lv1 = Lv * cosv
## 处理后向量(实验): NSCLC_center ===> group_later_center
vector_d = get_vector(NSCLC_center,group_later_center)
# 向量欧氏距离:
Ld = sqrt(vector_d[1]^ 2+vector_d[2]^ 2+vector_d[3]^ 2)
# 投影d
cosd = get_cos(vector_d, vector_back)
Ld1 = Ld * cosd
## LCAI
lcai = Ld1 - Lv1
#### 6 绘制3D PCA图 ====
if(plotPCA){
# 颜色矩阵，后续再完善下
colorname = c("blue","hotpink","green","yellow","red")
group_count = length(table(pheno$group))
pheno$color = factor(pheno$group, labels = colorname[1:group_count])
# 画布大小
rgl::open3d(windowRect=c(100,100,700,700))
rgl::plot3d(pcdata,
col = pheno$color,
type = 'p',
size = 8)
# 绘制直线叠加到上一个图
rgl::plot3d(x = c(group_former_center$PC1,group_later_center$PC1),
y = c(group_former_center$PC2,group_later_center$PC2),
z = c(group_former_center$PC3,group_later_center$PC3),
col = c("black","black"),add = T,type = 'p',size = 8)
rgl::plot3d(x = c(group_former_center$PC1,group_later_center$PC1),
y = c(group_former_center$PC2,group_later_center$PC2),
z = c(group_former_center$PC3,group_later_center$PC3),
col = "black",add = T,type = 'l',lwd = 2)
# pheno_pc = cbind(pheno,pcdata)
# fig = plotly::plot_ly(pheno_pc,x=~PC1,y=~PC2,z=~PC3,color = ~group,colors = ~c("blue","hotpink","green","yellow","red"),size = 2)
# fig = plotly::add_markers(fig)
# 输出信息
phe_unique = dplyr::count(x = pheno, group, color)
message("\n[INFO] PCA graph plotting complete! Colors and groups information are as follows\n")
print(phe_unique)
}
#### 7 输出LCAI值及其他信息 ====
# 判断正负并输出lcai到屏幕
if (lcai > 0) {
lcai = paste("+", lcai, sep = "")
message(
"\n[INFO] The lung cancer aggressive index (LCAI) is ",
lcai,
", group: ",
control,
" ---> ",
experimental
# ", showing the cancer promoting effect."
)
} else {
message(
"\n[INFO] The lung cancer aggressive index (LCAI) is ",
lcai,
" [",
control,
" ---> ",
experimental,
"]"
# ", showing the cancer inhibition effect."
)
}
message("\n")
message("[===========================]")
message("[######  getlcai END  ######]")
message("-----------------------------")
# 输出 lcai, 分组数据,前3个PC数据
out = list(lcai=lcai,exp=exp_join,pheno=pheno,pcdata=pcdata)
# out = list(lcai=lcai,exp=exp_join,pheno_pc=pheno_pc,fig=fig)
return(out)
}
message("-----------------------------")
print(out)
out = getlcai()
cai(exp = exp_example, pheno = pheno_example, control = "Control", experimental = "experimental", type = 'Array', plotPCA = TRUE)
library(getLCAI) data(exp_example) data(pheno_example) outlist = getlcai(
exp = exp_example,
pheno = pheno_example,
control = "Control",
experimental = "experimental",
type = 'Array',
plotPCA = TRUE
)
install.packages("./getLCAI_1.0.0.zip", repos = NULL, type = "win.binary")
library(getLCAI) data(exp_example) data(pheno_example) outlist = getlcai(
exp = exp_example,
pheno = pheno_example,
control = "Control",
experimental = "experimental",
type = 'Array',
plotPCA = TRUE
)
outlist = getlcai(
exp = exp_example,
pheno = pheno_example,
control = "Control",
experimental = "experimental",
type = 'Array',
plotPCA = TRUE
)
outlist = getlcai(
exp = exp_example,
pheno = pheno_example,
control = "Control",
experimental = "experimental",
type = 'Array',
plotPCA = TRUE
)
outlist = getlcai(
exp = exp_example,
pheno = pheno_example,
control = "Control",
experimental = "experimental",
type = 'Array',
plotPCA = TRUE
)
outlist = getlcai(
exp = exp_example,
pheno = pheno_example,
control = "Control",
experimental = "experimental",
type = 'Array',
plotPCA = TRUE
)
install.packages("./getLCAI_1.0.0.zip", repos = NULL, type = "win.binary")
library(getLCAI)
install.packages("./getLCAI_1.0.0.zip", repos = NULL, type = "win.binary")
install.packages("./getLCAI_1.0.0.zip", repos = NULL, type = "win.binary")
install.packages("./getLCAI_1.0.0.zip", repos = NULL, type = "win.binary")
install.packages("getLCAI_1.0.0.zip", repos = NULL, type = "win.binary")
install.packages(".\\getLCAI_1.0.0.zip", repos = NULL, type = "win.binary")
install.packages("\\getLCAI_1.0.0.zip", repos = NULL, type = "win.binary")
install.Rtools()
install.packages('installr')
library(installr)
install.Rtools()
install.packages("installr")
install.packages("installr")
install.packages("./getLCAI_1.0.0.zip", repos = NULL, type = "win.binary")
install.packages("./getLCAI_1.0.0.zip", repos = NULL, type = "win.binary")
install.Rtools()
install.packages("installr")
install.packages("stringr")    ###依赖包
library(stringr)
library(installr)
install.Rtools()
install.Rtools()
options("repos"=c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
install.packages('installr')
install.packages("installr")
library(installr)
install.Rtools()
install.Rtools()
options("repos"=c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
install.Rtools()
install.Rtools()
library(installr)
install.Rtools()
install.Rtools()
install.Rtools()
install.Rtools()
library(installr)
install.Rtools()
install.packages('installr')
install.packages("installr")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
install.packages("G:\\Coding\\getLcai\\getLCAI_test\\getLCAI_1.0.0.zip", repos = NULL, type = "win.binary")
library(getLCAI)
data(exp_example)
data(pheno_example)
outlist = getlcai(
exp = exp_example,
pheno = pheno_example,
control = "Control",
experimental = "experimental",
type = 'Array',
plotPCA = TRUE
)
getwd()
outlist = getlcai(
exp = exp_example,
pheno = pheno_example,
control = "Control",
experimental = "experimental",
type = 'Array',
plotPCA = TRUE
)
outlist = getlcai(
exp = exp_test,
pheno = pheno_test,
control = "Control",
experimental = "experimental",
type = 'Array',
plotPCA = TRUE
)
outlist = getlcai(
exp = exp_test,
pheno = pheno_test,
control = "Control",
experimental = "experimental",
type = 'Array',
plotPCA = TRUE
)
outlist = getlcai(
exp = exp_test_repo,
pheno = pheno_test_repo,
control = "Control",
experimental = "experimental",
type = 'Array',
plotPCA = TRUE
)
outlist = getlcai(
exp = exp_test_repo,
pheno = pheno_test_repo,
control = "Control",
experimental = "experimental",
type = 'Array',
plotPCA = TRUE
)
outlist = getlcai(
exp = "G:\\Coding\\getLcai\\2\\exp_GSE165843.txt",
pheno = "G:\\Coding\\getLcai\\2\\GSE165843_phe.txt",
control = "Control",
experimental = "experimental",
type = 'Array',
plotPCA = TRUE
)
outlist = getlcai(
exp = "G:\\Coding\\getLcai\\2\\exp_GSE165843.txt",
pheno = "G:\\Coding\\getLcai\\2\\GSE165843_phe.txt",
control = "Control",
experimental = "experimental",
type = 'Array',
plotPCA = TRUE
)
library(getLCAI)
# configure absolute path to test the code
exp_test_repo = "G:\\Coding\\getLcai\\2\\exp_GSE165843.txt"
pheno_test_repo = "G:\\Coding\\getLcai\\2\\GSE165843_phe.txt"
exp_test = read.table(exp_test_repo, header = TRUE)
pheno_test = read.table(pheno_test_repo, header = TRUE)
data(exp_test)
install.packages(
"G:\\Coding\\getLcai\\getLCAI_test\\getLCAI_1.0.0.zip",
repos = NULL,
type = "win.binary"
)
library(getLCAI)
# configure absolute path to test the code
exp_test_repo = "G:\\Coding\\getLcai\\2\\exp_GSE165843.txt"
pheno_test_repo = "G:\\Coding\\getLcai\\2\\GSE165843_phe.txt"
exp_test = read.table(exp_test_repo, header = TRUE)
pheno_test = read.table(pheno_test_repo, header = TRUE)
data(exp_test)
data(pheno_test)
data(exp_test)
data(pheno_test)
outlist = getlcai(
exp = "G:\\Coding\\getLcai\\2\\exp_GSE165843.txt",
pheno = "G:\\Coding\\getLcai\\2\\GSE165843_phe.txt",
control = "Control",
experimental = "experimental",
type = 'Array',
plotPCA = TRUE
)
install.packages(
"G:\\Coding\\getLcai\\getLCAI_test\\getLCAI_1.0.0.zip",
repos = NULL,
type = "win.binary"
)
library(getLCAI)
# configure absolute path to test the code
exp_test_repo = "G:\\Coding\\getLcai\\2\\exp_GSE165843.txt"
pheno_test_repo = "G:\\Coding\\getLcai\\2\\GSE165843_phe.txt"
exp_test <- read.table(exp_test_repo, header = TRUE)
pheno_test <- read.table(pheno_test_repo, header = TRUE)
data(exp_test)
data(pheno_test)
View(exp_test)
View(exp_test)
install.packages(
"G:\\Coding\\getLcai\\getLCAI_test\\getLCAI_1.0.0.zip",
repos = NULL,
type = "win.binary"
)
library(getLCAI)
# configure absolute path to test the code
exp_test_repo = "G:\\Coding\\getLcai\\2\\exp_GSE165843.txt"
pheno_test_repo = "G:\\Coding\\getLcai\\2\\GSE165843_phe.txt"
exp_test <- read.table(exp_test_repo, header = TRUE)
pheno_test <- read.table(pheno_test_repo, header = TRUE)
data(exp_test)
data(pheno_test)
outlist = getlcai(
exp = "G:\\Coding\\getLcai\\2\\exp_GSE165843.txt",
pheno = "G:\\Coding\\getLcai\\2\\GSE165843_phe.txt",
control = "Control",
experimental = "experimental",
type = 'Array',
plotPCA = TRUE
)
View(exp_test)
View(pheno_test)
install.packages(
"G:\\Coding\\getLcai\\getLCAI_test\\getLCAI_1.0.0.zip",
repos = NULL,
type = "win.binary"
)
library(getLCAI)
# configure absolute path to test the code
exp_test_repo = "G:\\Coding\\getLcai\\2\\exp_GSE165843.txt"
pheno_test_repo = "G:\\Coding\\getLcai\\2\\GSE165843_phe.txt"
exp_test <- read.table(exp_test_repo, header = TRUE)
pheno_test <- read.table(pheno_test_repo, header = TRUE)
data(exp_test)
data(pheno_test)
outlist = getlcai(
exp = "G:\\Coding\\getLcai\\2\\exp_GSE165843.txt",
pheno = "G:\\Coding\\getLcai\\2\\GSE165843_phe.txt",
control = "shCTL",
experimental = "shAMPKa",
type = 'Array',
plotPCA = TRUE
)
install.packages(
"G:\\Coding\\getLcai\\getLCAI_test\\getLCAI_1.0.0.zip",
repos = NULL,
type = "win.binary"
)
library(getLCAI)
# configure absolute path to test the code
exp_test_repo = "G:\\Coding\\getLcai\\2\\exp_GSE165843.txt"
pheno_test_repo = "G:\\Coding\\getLcai\\2\\GSE165843_phe.txt"
exp_test <- read.table(exp_test_repo, header = TRUE)
pheno_test <- read.table(pheno_test_repo, header = TRUE)
data(exp_test)
data(pheno_test)
outlist = getlcai(
exp = "G:\\Coding\\getLcai\\2\\exp_GSE165843.txt",
pheno = "G:\\Coding\\getLcai\\2\\GSE165843_phe.txt",
control = "shAMPKa",
experimental = "shCTL",
type = 'Array',
plotPCA = TRUE
)
outlist = getlcai(
exp = exp_test_repo,
pheno = "G:\\Coding\\getLcai\\2\\GSE165843_phe.txt",
control = "shAMPKa",
experimental = "shCTL",
type = 'Array',
plotPCA = TRUE
)
# step 1: configure your own testing directory
setwd("E:/Coding/getLCAI/test")
# step 2: configure 5 necessary values
# Your won exp path and pheno path, relatively
exp_test_path = "./2/exp_GSE165843.txt"
pheno_test_path = "./2/GSE165843_phe.txt"
control_type = "Control"
experimental_type = "experimental"
data_type = "Array" # data_type can only be 'Array' or 'RNA-seq'
install.packages("./getLCAI_1.0.0.zip",
repos = NULL,
type = "win.binary")
library(getLCAI)
exp_test <- read.table(exp_test_path, header = TRUE)
pheno_test <- read.table(pheno_test_path, header = TRUE)
outlist = getlcai(
exp = exp_test_path,
pheno = pheno_test_path,
control = control_type,
experimental = experimental_type,
type = data_type,
plotPCA = TRUE
)
